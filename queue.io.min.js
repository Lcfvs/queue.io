/* Copyright 2014 Lcf.vs - Released under the MIT license - https://github.com/Lcfvs/queue.io */
var Queue=function(e){'use strict';var a='object',b='done',d='error',t,p='prototype',q='events',w=Object.defineProperty,x='EventEmitter',y=Object.create,z='exports';if(t=function(e,t,n){var r,o,i,u,c,f,s;return r=e(q)[x],o=a==typeof t&&t,i='function'==typeof setImmediate&&setImmediate||a==typeof process&&process.nextTick||function(e){setTimeout(e,0)},u=function a(e,t){var n,r,o,u,m;return n=this instanceof a?this:y(a[p]),r=[],o=t||'value',u={done:!1},m=c.bind(r),e.on(o,m),e.once(b,f.bind(e,u,o,m)),e.once(d,n.emit.bind(n,d)),n.iterate=function(t){var c;return c=s(r,o,n,t),u.done?i(r.next):e.once(b,r.next),c},n},u[p]=y(r[p],{constructor:{value:u,writable:!0,configurable:!0}}),u.from=function(e,t){var n,o,i,c,f;for(n=0,o=e.length,i=new r,c=u(i,t);o>n;n+=1)f=e[n],i.emit(t||'value',f);return i.emit(b),c},c=function(e){this.push(e)},f=function(e,t,n){this.removeListener(t,n),e.done=!0},s=function(e,t,n,o){var c,f,s,a;return c=0,f=new r,s=function(){var d;return function(){a=a||e.slice(0),o===u.PREV&&a.reverse();if(!d){d=1,i(function(){c>=a.length?f.emit(b,n):f.emit(t,a[c],s(),n),c+=1})}}},e.next=s(),f},w(u,'NEXT',{value:{},enumerable:!0}),w(u,'PREV',{value:{},enumerable:!0}),u.noConflict=function(){return n[z]=o,u},u},'function'==typeof define&&define.amd)define(t);else if(a==typeof module&&module[z])return module[z]=t(require);return t(function(){var t;if(t=e[q]?e[q][x]:e[x],!t)throw new Error('Unable to find '+x);return{EventEmitter:t}})}(this);